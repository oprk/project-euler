# Highly divisible triangular number
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#
# The first ten terms would be:
#   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

from collections import Counter
import time

def nth_triangle_number(n):
  return n * (n + 1) / 2

def primes(max_num):
  if max_num >= 2:
    prime_bitmap = [True for i in xrange(max_num)]
    prime_bitmap[0] = False
    prime_bitmap[1] = False
    for i in xrange(max_num):
      if prime_bitmap[i]:
        yield i
        for j in xrange(i**2, max_num, i):
          prime_bitmap[j] = False
          
def prime_factors(num):
  max_factor = int(num ** 0.5)
  factors = Counter()
  for prime in primes(max_factor + 1):
    while num % prime == 0:
      factors[prime] += 1
      num /= prime
      if num == 1:
        return factors
  if num != 1:
    # What remains of num is prime.
    factors[num] += 1
  return factors

def num_divisors(num):
  factors = prime_factors(num)
  prod = 1
  for prime, count in factors.items():
    prod *= (count + 1)
  return prod

def num_divisors_nth_triangle_number(n):
  (even, odd) = (n, n + 1) if n % 2 == 0 else (n + 1, n)
  factors1 = prime_factors(even / 2)
  factors2 = prime_factors(odd)
  factors = factors1 + factors2
  prod = 1
  for prime, count in factors.items():
    prod *= (count + 1)
  return prod

# t0 = time.time()

# i = 1
# triangle_number = 1
# while num_divisors(triangle_number) < 500:
#   i += 1
#   triangle_number += i

# t1 = time.time()

# print(triangle_number)
# print('time %f' % (t1 - t0))
# # 76576500
# # time 7.166293

t0 = time.time()

i = 1
while num_divisors_nth_triangle_number(i) < 500:
  i += 1

t1 = time.time()

print(nth_triangle_number(i))
print('time %f' % (t1 - t0))
# 76576500
# time 0.506524

# num_divisors_nth_triangle_number is much faster!
